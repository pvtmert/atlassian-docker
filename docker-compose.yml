#!/usr/bin/env docker-compose -p atlassian -f

version: "3.4"

networks:
  hostnet:
    external:
      name: host
  internal:
    driver: overlay
    internal: true
  external:
    driver: overlay

volumes:
  data:
    external: true
  share:
    driver: local
    driver_opts:
      type: nfs
      o: addr=storage,nolock,soft,rw,async,nfsvers=4
      device: ":/mnt"
  jira_home:
  crowd_home:
  bamboo_home:
  bitbucket_home:
  confluence_home:


x-cfg-deployment: &deploymentcfg
  replicas: 1
  mode: replicated
  endpoint_mode: vip
  restart_policy:
    condition: on-failure
    max_attempts: 10
    window: 60s
    delay: 5s
  resources:
    limits:
      cpus: "2.00"
      memory: 2G
    reservations:
      cpus: "0.50"
      memory: 1G
  placement:
    constraints:
      - node.role == worker

x-cfg-master: &mastercfg
  placement:
    constraints:
      - node.role == manager


services:

  advisor:
    restart: always
    image: google/cadvisor
    networks:
      - hostnet
    ports:
      - 8001:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    deploy:
      mode: global

  visual:
    restart: always
    image: dockersamples/visualizer:stable
    networks:
      - external
    ports:
      - 8002:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy: *mastercfg

  data:
    restart: on-failure
    image: pvtmert/atlassian:data
    build:
      context: ./
      dockerfile: data.dockerfile
    networks:
      - internal
      - external
    ports:
      - 3306:3306
    volumes:
      - type: volume
        source: data
        target: /var/lib/mysql
    deploy: *mastercfg

  base:
    restart: on-failure
    image: pvtmert/atlassian:base
    build:
      context: ./
      dockerfile: base.dockerfile
    networks:
      - internal
      - external
    ports:
      - 443:443
      - 80:80
    #volumes_from: data
    #volumes: []
      #- ./nginx.conf:/etc/nginx/sites-enabled/default
      #- type: volume
      #  source: data
      #  target: /etc/nginx/sites-enabled
      #  read_only: true
      #  volume:
      #    nocopy: true
      #- type: bind
      #  source: ./
      #  target: /data
      #  read_only: true
      #  volume:
      #    nocopy: true
    depends_on:
      - jira
      - crowd
      - bamboo
      - bitbucket
      - confluence
    deploy: *mastercfg

##### JIRA:

  jira:
    #command: [ "sleep", "999999999" ]
    restart: on-failure
    image: pvtmert/atlassian:jira
    build:
      context: ./
      dockerfile: jira.dockerfile
    networks:
      - internal
    #volumes_from: data
    volumes:
      - jira_home:/home
      #- ./jira.server.xml:/data/conf/server.xml
    deploy: *deploymentcfg

##### CROWD:

  crowd:
    #command: [ "sleep", "999999999" ]
    restart: on-failure
    image: pvtmert/atlassian:crowd
    build:
      context: ./
      dockerfile: crowd.dockerfile
    networks:
      - internal
    #volumes_from: data
    volumes:
      - crowd_home:/home
      #- ./crowd.server.xml:/data/apache-tomcat/conf/server.xml
    depends_on:
      - data
    deploy: *deploymentcfg

##### BAMBOO:

  bamboo:
    #command: [ "sleep", "999999999" ]
    restart: on-failure
    image: pvtmert/atlassian:bamboo
    build:
      context: ./
      dockerfile: bamboo.dockerfile
    networks:
      - internal
    #volumes_from: data
    volumes:
      - bamboo_home:/home
      #- ./bamboo.server.xml:/data/conf/server.xml
    depends_on:
      - data
    deploy: *deploymentcfg

##### BITBUCKET:

  bitbucket:
    #command: [ "sleep", "999999999" ]
    restart: on-failure
    image: pvtmert/atlassian:bitbucket
    build:
      context: ./
      dockerfile: bitbucket.dockerfile
    networks:
      - internal
    #volumes_from: data
    volumes:
      - bitbucket_home:/home
    depends_on:
      - data
    deploy: *deploymentcfg


##### CONFLUENCE:

  confluence:
    #command: [ "sleep", "999999999" ]
    restart: on-failure
    image: pvtmert/atlassian:confluence
    build:
      context: ./
      dockerfile: confluence.dockerfile
    networks:
      - internal
    #volumes_from: data
    volumes:
      - confluence_home:/home
      #- ./confluence.server.xml:/data/conf/server.xml
    depends_on:
      - data
    deploy: *deploymentcfg
